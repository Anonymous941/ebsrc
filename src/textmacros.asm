.MACRO EBTEXT_LINE_BREAK
	.BYTE $00
.ENDMACRO

.MACRO EBTEXT_START_NEW_LINE
	.BYTE $01
.ENDMACRO

.MACRO EBTEXT_END_BLOCK
	.BYTE $02
.ENDMACRO

.MACRO EBTEXT_HALT_WITH_PROMPT
	.BYTE $03
.ENDMACRO

.MACRO EBTEXT_SET_EVENT_FLAG arg
	.BYTE $04
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_CLEAR_EVENT_FLAG arg
	.BYTE $05
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_JUMP_IF_FLAG_SET dest, flag
	.BYTE $06
	.WORD flag
	.DWORD dest
.ENDMACRO

.MACRO EBTEXT_CHECK_EVENT_FLAG arg
	.BYTE $07
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_CALL_TEXT arg
	.BYTE $08
	.DWORD arg
.ENDMACRO

.MACRO EBTEXT_JUMP_MULTI dest0, dest1, dest2, dest3, dest4, dest5, dest6, dest7, dest8, dest9, dest10, dest11, dest12, dest13, dest14, dest15, dest16, dest17, dest18, dest19, dest20, dest21, dest22, dest23, dest24, dest25, dest26, dest27, dest28, dest29, dest30, dest31, dest32, dest33, dest34, dest35, dest36, dest37, dest38, dest39, dest40, dest41, dest42, dest43, dest44, dest45, dest46, dest47, dest48, dest49, dest50, dest51, dest52, dest53, dest54, dest55, dest56, dest57, dest58, dest59, dest60, dest61, dest62, dest63, dest64, dest65, dest66, dest67, dest68, dest69, dest70, dest71, dest72, dest73, dest74, dest75, dest76, dest77, dest78, dest79
	.BYTE $09, .PARAMCOUNT
	.IF(.PARAMCOUNT > 0)
		.DWORD dest0
	.ENDIF
	.IF(.PARAMCOUNT > 1)
		.DWORD dest1
	.ENDIF
	.IF(.PARAMCOUNT > 2)
		.DWORD dest2
	.ENDIF
	.IF(.PARAMCOUNT > 3)
		.DWORD dest3
	.ENDIF
	.IF(.PARAMCOUNT > 4)
		.DWORD dest4
	.ENDIF
	.IF(.PARAMCOUNT > 5)
		.DWORD dest5
	.ENDIF
	.IF(.PARAMCOUNT > 6)
		.DWORD dest6
	.ENDIF
	.IF(.PARAMCOUNT > 7)
		.DWORD dest7
	.ENDIF
	.IF(.PARAMCOUNT > 8)
		.DWORD dest8
	.ENDIF
	.IF(.PARAMCOUNT > 9)
		.DWORD dest9
	.ENDIF
	.IF(.PARAMCOUNT > 10)
		.DWORD dest10
	.ENDIF
	.IF(.PARAMCOUNT > 11)
		.DWORD dest11
	.ENDIF
	.IF(.PARAMCOUNT > 12)
		.DWORD dest12
	.ENDIF
	.IF(.PARAMCOUNT > 13)
		.DWORD dest13
	.ENDIF
	.IF(.PARAMCOUNT > 14)
		.DWORD dest14
	.ENDIF
	.IF(.PARAMCOUNT > 15)
		.DWORD dest15
	.ENDIF
	.IF(.PARAMCOUNT > 16)
		.DWORD dest16
	.ENDIF
	.IF(.PARAMCOUNT > 17)
		.DWORD dest17
	.ENDIF
	.IF(.PARAMCOUNT > 18)
		.DWORD dest18
	.ENDIF
	.IF(.PARAMCOUNT > 19)
		.DWORD dest19
	.ENDIF
	.IF(.PARAMCOUNT > 20)
		.DWORD dest20
	.ENDIF
	.IF(.PARAMCOUNT > 21)
		.DWORD dest21
	.ENDIF
	.IF(.PARAMCOUNT > 22)
		.DWORD dest22
	.ENDIF
	.IF(.PARAMCOUNT > 23)
		.DWORD dest23
	.ENDIF
	.IF(.PARAMCOUNT > 24)
		.DWORD dest24
	.ENDIF
	.IF(.PARAMCOUNT > 25)
		.DWORD dest25
	.ENDIF
	.IF(.PARAMCOUNT > 26)
		.DWORD dest26
	.ENDIF
	.IF(.PARAMCOUNT > 27)
		.DWORD dest27
	.ENDIF
	.IF(.PARAMCOUNT > 28)
		.DWORD dest28
	.ENDIF
	.IF(.PARAMCOUNT > 29)
		.DWORD dest29
	.ENDIF
	.IF(.PARAMCOUNT > 30)
		.DWORD dest30
	.ENDIF
	.IF(.PARAMCOUNT > 31)
		.DWORD dest31
	.ENDIF
	.IF(.PARAMCOUNT > 32)
		.DWORD dest32
	.ENDIF
	.IF(.PARAMCOUNT > 33)
		.DWORD dest33
	.ENDIF
	.IF(.PARAMCOUNT > 34)
		.DWORD dest34
	.ENDIF
	.IF(.PARAMCOUNT > 35)
		.DWORD dest35
	.ENDIF
	.IF(.PARAMCOUNT > 36)
		.DWORD dest36
	.ENDIF
	.IF(.PARAMCOUNT > 37)
		.DWORD dest37
	.ENDIF
	.IF(.PARAMCOUNT > 38)
		.DWORD dest38
	.ENDIF
	.IF(.PARAMCOUNT > 39)
		.DWORD dest39
	.ENDIF
	.IF(.PARAMCOUNT > 40)
		.DWORD dest40
	.ENDIF
	.IF(.PARAMCOUNT > 41)
		.DWORD dest41
	.ENDIF
	.IF(.PARAMCOUNT > 42)
		.DWORD dest42
	.ENDIF
	.IF(.PARAMCOUNT > 43)
		.DWORD dest43
	.ENDIF
	.IF(.PARAMCOUNT > 44)
		.DWORD dest44
	.ENDIF
	.IF(.PARAMCOUNT > 45)
		.DWORD dest45
	.ENDIF
	.IF(.PARAMCOUNT > 46)
		.DWORD dest46
	.ENDIF
	.IF(.PARAMCOUNT > 47)
		.DWORD dest47
	.ENDIF
	.IF(.PARAMCOUNT > 48)
		.DWORD dest48
	.ENDIF
	.IF(.PARAMCOUNT > 49)
		.DWORD dest49
	.ENDIF
	.IF(.PARAMCOUNT > 50)
		.DWORD dest50
	.ENDIF
	.IF(.PARAMCOUNT > 51)
		.DWORD dest51
	.ENDIF
	.IF(.PARAMCOUNT > 52)
		.DWORD dest52
	.ENDIF
	.IF(.PARAMCOUNT > 53)
		.DWORD dest53
	.ENDIF
	.IF(.PARAMCOUNT > 54)
		.DWORD dest54
	.ENDIF
	.IF(.PARAMCOUNT > 55)
		.DWORD dest55
	.ENDIF
	.IF(.PARAMCOUNT > 56)
		.DWORD dest56
	.ENDIF
	.IF(.PARAMCOUNT > 57)
		.DWORD dest57
	.ENDIF
	.IF(.PARAMCOUNT > 58)
		.DWORD dest58
	.ENDIF
	.IF(.PARAMCOUNT > 59)
		.DWORD dest59
	.ENDIF
	.IF(.PARAMCOUNT > 60)
		.DWORD dest60
	.ENDIF
	.IF(.PARAMCOUNT > 61)
		.DWORD dest61
	.ENDIF
	.IF(.PARAMCOUNT > 62)
		.DWORD dest62
	.ENDIF
	.IF(.PARAMCOUNT > 63)
		.DWORD dest63
	.ENDIF
	.IF(.PARAMCOUNT > 64)
		.DWORD dest64
	.ENDIF
	.IF(.PARAMCOUNT > 65)
		.DWORD dest65
	.ENDIF
	.IF(.PARAMCOUNT > 66)
		.DWORD dest66
	.ENDIF
	.IF(.PARAMCOUNT > 67)
		.DWORD dest67
	.ENDIF
	.IF(.PARAMCOUNT > 68)
		.DWORD dest68
	.ENDIF
	.IF(.PARAMCOUNT > 69)
		.DWORD dest69
	.ENDIF
	.IF(.PARAMCOUNT > 70)
		.DWORD dest70
	.ENDIF
	.IF(.PARAMCOUNT > 71)
		.DWORD dest71
	.ENDIF
	.IF(.PARAMCOUNT > 72)
		.DWORD dest72
	.ENDIF
	.IF(.PARAMCOUNT > 73)
		.DWORD dest73
	.ENDIF
	.IF(.PARAMCOUNT > 74)
		.DWORD dest74
	.ENDIF
	.IF(.PARAMCOUNT > 75)
		.DWORD dest75
	.ENDIF
	.IF(.PARAMCOUNT > 76)
		.DWORD dest76
	.ENDIF
	.IF(.PARAMCOUNT > 77)
		.DWORD dest77
	.ENDIF
	.IF(.PARAMCOUNT > 78)
		.DWORD dest78
	.ENDIF
	.IF(.PARAMCOUNT > 79)
		.DWORD dest79
	.ENDIF
	.IF (.PARAMCOUNT > 80)
		.WARNING(.SPRINTF("Not enough parameters for JUMP_MULTI, need %d", .PARAMCOUNT))
	.ENDIF
.ENDMACRO

.MACRO EBTEXT_JUMP dest
	.BYTE $0A
	.DWORD dest
.ENDMACRO

.MACRO EBTEXT_TEST_IF_WORKMEM_TRUE arg
	.BYTE $0B, arg
.ENDMACRO

.MACRO EBTEXT_TEST_IF_WORKMEM_FALSE arg
	.BYTE $0C, arg
.ENDMACRO

.MACRO EBTEXT_COPY_TO_ARGMEM arg
	.BYTE $0D, arg
.ENDMACRO

.MACRO EBTEXT_STORE_TO_ARGMEM arg
	.BYTE $0E, arg
.ENDMACRO

.MACRO EBTEXT_INCREMENT_WORKMEM
	.BYTE $0F
.ENDMACRO

.MACRO EBTEXT_PAUSE arg
	.BYTE $10, arg
.ENDMACRO

.MACRO EBTEXT_CREATE_SELECTION_MENU
	.BYTE $11
.ENDMACRO

.MACRO EBTEXT_CLEAR_TEXT_LINE
	.BYTE $12
.ENDMACRO

.MACRO EBTEXT_HALT_WITHOUT_PROMPT
	.BYTE $13
.ENDMACRO

.MACRO EBTEXT_HALT_WITH_PROMPT_ALWAYS
	.BYTE $14
.ENDMACRO


.MACRO EBTEXT_COMPRESSED_BANK_1 arg
	.BYTE $15, arg
.ENDMACRO

.MACRO EBTEXT_COMPRESSED_BANK_2 arg
	.BYTE $16, arg
.ENDMACRO

.MACRO EBTEXT_COMPRESSED_BANK_3 arg
	.BYTE $17, arg
.ENDMACRO


.MACRO EBTEXT_CLOSE_WINDOW
	.BYTE $18, $00
.ENDMACRO

.MACRO EBTEXT_OPEN_WINDOW arg
	.BYTE $18, $01, arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_18_02
	.BYTE $18, $02
.ENDMACRO

.MACRO EBTEXT_SWITCH_TO_WINDOW arg
	.BYTE $18, $03, arg
.ENDMACRO

.MACRO EBTEXT_CLOSE_ALL_WINDOWS
	.BYTE $18, $04
.ENDMACRO

.MACRO EBTEXT_FORCE_TEXT_ALIGNMENT arg, arg2
	.BYTE $18, $05, arg, arg2
.ENDMACRO

.MACRO EBTEXT_CLEAR_WINDOW
	.BYTE $18, $06
.ENDMACRO

.MACRO EBTEXT_CHECK_FOR_INEQUALITY arg, arg2
	.BYTE $18, $07
	.DWORD arg
	.BYTE arg2
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_18_08 arg
	.BYTE $18, $08
	.DWORD arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_18_09
	.BYTE $18, $09
.ENDMACRO

.MACRO EBTEXT_SHOW_WALLET_WINDOW
	.BYTE $18, $0A
.ENDMACRO



.MACRO EBTEXT_LOAD_STRING_TO_MEMORY
	.BYTE $19, $02
.ENDMACRO

.MACRO EBTEXT_CLEAR_LOADED_STRINGS
	.BYTE $19, $04
.ENDMACRO

.MACRO EBTEXT_INFLICT_STATUS arg, arg2, arg3
	.BYTE $19, $05, arg, arg2, arg3
.ENDMACRO

.MACRO EBTEXT_GET_CHARACTER_NUMBER arg
	.BYTE $19, $10, arg
.ENDMACRO

.MACRO EBTEXT_GET_CHARACTER_NAME_LETTER arg
	.BYTE $19, $11, arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_19_14
	.BYTE $19, $14
.ENDMACRO

.MACRO EBTEXT_GET_CHARACTER_STATUS arg, arg2
	.BYTE $19, $16, arg, arg2
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_19_18 arg
	.BYTE $19, $18, arg
.ENDMACRO

.MACRO EBTEXT_ADD_ITEM_ID_TO_WORK_MEMORY arg, arg2
	.BYTE $19, $19, arg, arg2
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_19_1A arg
	.BYTE $19, $1A, arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_19_1B arg
	.BYTE $19, $1B, arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_19_1C arg, arg2
	.BYTE $19, $1C, arg, arg2
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_19_1D arg, arg2
	.BYTE $19, $1D, arg, arg2
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_19_1E
	.BYTE $19, $1E
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_19_1F
	.BYTE $19, $1F
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_19_20
	.BYTE $19, $20
.ENDMACRO

.MACRO EBTEXT_IS_ITEM_DRINK arg
	.BYTE $19, $21, arg
.ENDMACRO

.MACRO EBTEXT_GET_DIRECTION_OF_OBJECT_FROM_CHARACTER arg, arg2, arg3
	.BYTE $19, $22, arg, arg2
	.WORD arg3
.ENDMACRO

.MACRO EBTEXT_GET_DIRECTION_OF_OBJECT_FROM_NPC arg, arg2, arg3
	.BYTE $19, $23
	.WORD arg, arg2
	.BYTE arg3
.ENDMACRO

.MACRO EBTEXT_GET_DIRECTION_OF_OBJECT_FROM_SPRITE arg, arg2
	.BYTE $19, $24
	.WORD arg, arg2
.ENDMACRO

.MACRO EBTEXT_IS_ITEM_CONDIMENT arg
	.BYTE $19, $25, arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_19_26 arg
	.BYTE $19, $26, arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_19_27 arg
	.BYTE $19, $27, arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_19_28 arg
	.BYTE $19, $28, arg
.ENDMACRO



.MACRO EBTEXT_PARTY_MEMBER_SELECTION_MENU_UNCANCELLABLE arg, arg2, arg3, arg4, arg5
	.BYTE $1A, $01
	.DWORD arg, arg2, arg3, arg4
	.BYTE arg5
.ENDMACRO

.MACRO EBTEXT_SHOW_CHARACTER_INVENTORY arg, arg2
	.BYTE $1A, $05, arg, arg2
.ENDMACRO

.MACRO EBTEXT_DISPLAY_SHOP_MENU arg
	.BYTE $1A, $06, arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1A_07
	.BYTE $1A, $07
.ENDMACRO

.MACRO EBTEXT_OPEN_PHONE_MENU
	.BYTE $1A, $0A
.ENDMACRO



.MACRO EBTEXT_COPY_ACTIVE_MEMORY_TO_STORAGE
	.BYTE $1B, $00
.ENDMACRO

.MACRO EBTEXT_COPY_STORAGE_MEMORY_TO_ACTIVE
	.BYTE $1B, $01
.ENDMACRO

.MACRO EBTEXT_JUMP_IF_FALSE arg
	.BYTE $1B, $02
	.DWORD arg
.ENDMACRO

.MACRO EBTEXT_JUMP_IF_TRUE arg
	.BYTE $1B, $03
	.DWORD arg
.ENDMACRO

.MACRO EBTEXT_SWAP_WORKING_AND_ARG_MEMORY
	.BYTE $1B, $04
.ENDMACRO

.MACRO EBTEXT_COPY_ACTIVE_MEMORY_TO_WORKING_MEMORY
	.BYTE $1B, $05
.ENDMACRO

.MACRO EBTEXT_COPY_WORKING_MEMORY_TO_ACTIVE_MEMORY
	.BYTE $1B, $06
.ENDMACRO



.MACRO EBTEXT_TEXT_COLOUR_EFFECTS arg
	.BYTE $1C, $00, arg
.ENDMACRO

.MACRO EBTEXT_PRINT_STAT arg
	.BYTE $1C, $01, arg
.ENDMACRO

.MACRO EBTEXT_PRINT_CHAR_NAME arg
	.BYTE $1C, $02, arg
.ENDMACRO

.MACRO EBTEXT_PRINT_CHAR arg
	.BYTE $1C, $03, arg
.ENDMACRO

.MACRO EBTEXT_OPEN_HP_PP_WINDOWS
	.BYTE $1C, $04
.ENDMACRO

.MACRO EBTEXT_PRINT_ITEM_NAME arg
	.BYTE $1C, $05, arg
.ENDMACRO

.MACRO EBTEXT_PRINT_TELEPORT_DESTINATION_NAME arg
	.BYTE $1C, $06, arg
.ENDMACRO

.MACRO EBTEXT_PRINT_HORIZONTAL_TEXT_STRING arg
	.BYTE $1C, $07, arg
.ENDMACRO

.MACRO EBTEXT_PRINT_SPECIAL_GFX arg
	.BYTE $1C, $08, arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1C_09
	.BYTE $1C, $09
.ENDMACRO

.MACRO EBTEXT_PRINT_NUMBER arg
	.BYTE $1C, $0A
	.DWORD arg
.ENDMACRO

.MACRO EBTEXT_PRINT_MONEY_AMOUNT arg
	.BYTE $1C, $0B
	.DWORD arg
.ENDMACRO

.MACRO EBTEXT_PRINT_VERTICAL_TEXT_STRING arg
	.BYTE $1C, $0C, arg
.ENDMACRO

.MACRO EBTEXT_PRINT_ACTION_USER_NAME
	.BYTE $1C, $0D
.ENDMACRO

.MACRO EBTEXT_PRINT_ACTION_TARGET_NAME
	.BYTE $1C, $0E
.ENDMACRO

.MACRO EBTEXT_PRINT_ACTION_AMOUNT
	.BYTE $1C, $0F
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1C_11 arg
	.BYTE $1C, $11, arg
.ENDMACRO

.MACRO EBTEXT_PRINT_PSI_NAME arg
	.BYTE $1C, $12, arg
.ENDMACRO

.MACRO EBTEXT_DISPLAY_PSI_ANIMATION arg, arg2
	.BYTE $1C, $13, arg, arg2
.ENDMACRO

.MACRO EBTEXT_LOAD_SPECIAL arg
	.BYTE $1C, $14, arg
.ENDMACRO

.MACRO EBTEXT_LOAD_SPECIAL_FOR_JUMP_MULTI arg
	.BYTE $1C, $15, arg
.ENDMACRO



.MACRO EBTEXT_GIVE_ITEM_TO_CHARACTER arg, arg2
	.BYTE $1D, $00, arg, arg2
.ENDMACRO

.MACRO EBTEXT_TAKE_ITEM_FROM_CHARACTER arg, arg2
	.BYTE $1D, $01, arg, arg2
.ENDMACRO

.MACRO EBTEXT_GET_PLAYER_HAS_INVENTORY_FULL arg
	.BYTE $1D, $02, arg
.ENDMACRO

.MACRO EBTEXT_GET_PLAYER_HAS_INVENTORY_ROOM arg
	.BYTE $1D, $03, arg
.ENDMACRO

.MACRO EBTEXT_CHECK_IF_CHARACTER_DOESNT_HAVE_ITEM arg, arg2
	.BYTE $1D, $04, arg, arg2
.ENDMACRO

.MACRO EBTEXT_CHECK_IF_CHARACTER_HAS_ITEM arg, arg2
	.BYTE $1D, $05, arg, arg2
.ENDMACRO

.MACRO EBTEXT_ADD_TO_ATM arg
	.BYTE $1D, $06
	.DWORD arg
.ENDMACRO

.MACRO EBTEXT_TAKE_FROM_ATM arg
	.BYTE $1D, $07
	.DWORD arg
.ENDMACRO

.MACRO EBTEXT_ADD_TO_WALLET arg
	.BYTE $1D, $08
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_TAKE_FROM_WALLET arg
	.BYTE $1D, $09
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_GET_BUY_PRICE_OF_ITEM arg
	.BYTE $1D, $0A, arg
.ENDMACRO

.MACRO EBTEXT_GET_SELL_PRICE_OF_ITEM arg
	.BYTE $1D, $0B, arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1D_0C arg
	.BYTE $1D, $0C
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_CHARACTER_HAS_AILMENT arg, arg2, arg3
	.BYTE $1D, $0D, arg, arg2 + 1, arg3
.ENDMACRO

.MACRO EBTEXT_GIVE_ITEM_TO_CHARACTER_B arg, arg2
	.BYTE $1D, $0E, arg, arg2
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1D_0F arg
	.BYTE $1D, $0F
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1D_10 arg
	.BYTE $1D, $10
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1D_11 arg
	.BYTE $1D, $11
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1D_12 arg
	.BYTE $1D, $12
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1D_13 arg
	.BYTE $1D, $13
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_HAVE_ENOUGH_MONEY arg
	.BYTE $1D, $14
	.DWORD arg
.ENDMACRO

.MACRO EBTEXT_PUT_VAL_IN_ARGMEM arg
	.BYTE $1D, $15
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_HAVE_ENOUGH_MONEY_IN_ATM arg
	.BYTE $1D, $17
	.DWORD arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1D_18 arg
	.BYTE $1D, $18, arg
.ENDMACRO

.MACRO EBTEXT_HAVE_X_PARTY_MEMBERS arg
	.BYTE $1D, $19, arg
.ENDMACRO

.MACRO EBTEXT_TEST_IS_USER_TARGETTING_SELF
	.BYTE $1D, $20
.ENDMACRO

.MACRO EBTEXT_GENERATE_RANDOM_NUMBER arg
	.BYTE $1D, $21, arg
.ENDMACRO

.MACRO EBTEXT_TEST_IF_EXIT_MOUSE_USABLE
	.BYTE $1D, $22
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1D_23 arg
	.BYTE $1D, $23, arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1D_24 arg
	.BYTE $1D, $24, arg
.ENDMACRO



.MACRO EBTEXT_RECOVER_HP_PERCENT arg, arg2
	.BYTE $1E, $00, arg, arg2
.ENDMACRO

.MACRO EBTEXT_DEPLETE_HP_PERCENT arg, arg2
	.BYTE $1E, $01, arg, arg2
.ENDMACRO

.MACRO EBTEXT_RECOVER_HP_AMOUNT arg, arg2
	.BYTE $1E, $02, arg, arg2
.ENDMACRO

.MACRO EBTEXT_DEPLETE_HP_AMOUNT arg, arg2
	.BYTE $1E, $03, arg, arg2
.ENDMACRO

.MACRO EBTEXT_RECOVER_PP_PERCENT arg, arg2
	.BYTE $1E, $04, arg, arg2
.ENDMACRO

.MACRO EBTEXT_DEPLETE_PP_PERCENT arg, arg2
	.BYTE $1E, $05, arg, arg2
.ENDMACRO

.MACRO EBTEXT_RECOVER_PP_AMOUNT arg, arg2
	.BYTE $1E, $06, arg, arg2
.ENDMACRO

.MACRO EBTEXT_DEPLETE_PP_AMOUNT arg, arg2
	.BYTE $1E, $07, arg, arg2
.ENDMACRO

.MACRO EBTEXT_SET_CHARACTER_LEVEL arg, arg2
	.BYTE $1E, $08, arg, arg2
.ENDMACRO

.MACRO EBTEXT_GIVE_EXPERIENCE arg, arg2
	.BYTE $1E, $09, arg
	.FARADDR arg2
.ENDMACRO

.MACRO EBTEXT_BOOST_IQ arg, arg2
	.BYTE $1E, $0A, arg
	.WORD arg2
.ENDMACRO

.MACRO EBTEXT_BOOST_GUTS arg, arg2
	.BYTE $1E, $0B, arg
	.WORD arg2
.ENDMACRO

.MACRO EBTEXT_BOOST_SPEED arg, arg2
	.BYTE $1E, $0C, arg
	.WORD arg2
.ENDMACRO

.MACRO EBTEXT_BOOST_VITALITY arg, arg2
	.BYTE $1E, $0D, arg
	.WORD arg2
.ENDMACRO

.MACRO EBTEXT_BOOST_LUCK arg, arg2
	.BYTE $1E, $0E, arg
	.WORD arg2
.ENDMACRO



.MACRO EBTEXT_PLAY_MUSIC arg, arg2
	.BYTE $1F, $00, arg, arg2
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1F_01 arg
	.BYTE $1F, $01, arg
.ENDMACRO

.MACRO EBTEXT_PLAY_SOUND arg
	.BYTE $1F, $02, arg
.ENDMACRO

.MACRO EBTEXT_RESTORE_DEFAULT_MUSIC
	.BYTE $1F, $03
.ENDMACRO

.MACRO EBTEXT_SET_TEXT_PRINTING_SOUND arg
	.BYTE $1F, $04, arg
.ENDMACRO

.MACRO EBTEXT_DISABLE_SECTOR_MUSIC_CHANGE
	.BYTE $1F, $05
.ENDMACRO

.MACRO EBTEXT_ENABLE_SECTOR_MUSIC_CHANGE
	.BYTE $1F, $06
.ENDMACRO

.MACRO EBTEXT_APPLY_MUSIC_EFFECT arg
	.BYTE $1F, $07, arg
.ENDMACRO

.MACRO EBTEXT_ADD_PARTY_MEMBER arg
	.BYTE $1F, $11, arg
.ENDMACRO

.MACRO EBTEXT_REMOVE_PARTY_MEMBER arg
	.BYTE $1F, $12, arg
.ENDMACRO

.MACRO EBTEXT_CHANGE_CHARACTER_DIRECTION arg, arg2
	.BYTE $1F, $13, arg, arg2
.ENDMACRO

.MACRO EBTEXT_CHANGE_PARTY_DIRECTION arg
	.BYTE $1F, $14, arg
.ENDMACRO

.MACRO EBTEXT_GENERATE_ACTIVE_SPRITE arg, arg2, arg3
	.BYTE $1F, $15
	.WORD arg, arg2
	.BYTE arg3
.ENDMACRO

.MACRO EBTEXT_CHANGE_TPT_ENTRY_DIRECTION arg, arg2
	.BYTE $1F, $16
	.WORD arg
	.BYTE arg2
.ENDMACRO

.MACRO EBTEXT_CREATE_ENTITY arg, arg2, arg3
	.BYTE $1F, $17
	.WORD arg, arg2
	.BYTE arg3
.ENDMACRO

.MACRO EBTEXT_CREATE_FLOATING_SPRITE_NEAR_TPT_ENTRY arg, arg2
	.BYTE $1F, $1A
	.WORD arg
	.BYTE arg2
.ENDMACRO

.MACRO EBTEXT_DELETE_FLOATING_SPRITE_NEAR_TPT_ENTRY arg
	.BYTE $1F, $1B
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_CREATE_FLOATING_SPRITE_NEAR_CHARACTER arg, arg2
	.BYTE $1F, $1C, arg, arg2
.ENDMACRO

.MACRO EBTEXT_DELETE_FLOATING_SPRITE_NEAR_CHARACTER arg
	.BYTE $1F, $1D, arg
.ENDMACRO

.MACRO EBTEXT_DELETE_TPT_INSTANCE arg, arg2
	.BYTE $1F, $1E
	.WORD arg
	.BYTE arg2
.ENDMACRO

.MACRO EBTEXT_DELETE_GENERATED_SPRITE arg, arg2
	.BYTE $1F, $1F
	.WORD arg
	.BYTE arg2
.ENDMACRO

.MACRO EBTEXT_TRIGGER_PSI_TELEPORT arg, arg2
	.BYTE $1F, $20, arg, arg2
.ENDMACRO

.MACRO EBTEXT_TELEPORT_TO arg
	.BYTE $1F, $21, arg
.ENDMACRO

.MACRO EBTEXT_TRIGGER_BATTLE arg
	.BYTE $1F, $23
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_USE_NORMAL_FONT
	.BYTE $1F, $30
.ENDMACRO

.MACRO EBTEXT_USE_MR_SATURN_FONT
	.BYTE $1F, $31
.ENDMACRO

.MACRO EBTEXT_TRIGGER_EVENT arg
	.BYTE $1F, $41, arg
.ENDMACRO

.MACRO EBTEXT_DISABLE_CONTROLLER_INPUT
	.BYTE $1F, $50
.ENDMACRO

.MACRO EBTEXT_ENABLE_CONTROLLER_INPUT
	.BYTE $1F, $51
.ENDMACRO

.MACRO EBTEXT_CREATE_NUMBER_SELECTOR arg
	.BYTE $1F, $52, arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1F_60
	.BYTE $1F, $60
.ENDMACRO

.MACRO EBTEXT_TRIGGER_MOVEMENT_CODE
	.BYTE $1F, $61
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1F_62 arg
	.BYTE $1F, $62, arg
.ENDMACRO

.MACRO EBTEXT_SCREEN_RELOAD_PTR arg
	.BYTE $1F, $63
	.DWORD arg
.ENDMACRO

.MACRO EBTEXT_DELETE_ALL_NPCS
	.BYTE $1F, $64
.ENDMACRO

.MACRO EBTEXT_DELETE_FIRST_NPC
	.BYTE $1F, $65
.ENDMACRO

.MACRO EBTEXT_ACTIVATE_HOTSPOT arg, arg2, arg3
	.BYTE $1F, $66, arg, arg2
	.DWORD arg3
.ENDMACRO

.MACRO EBTEXT_DEACTIVATE_HOTSPOT arg
	.BYTE $1F, $67, arg
.ENDMACRO

.MACRO EBTEXT_STORE_COORDINATES_TO_MEMORY
	.BYTE $1F, $68
.ENDMACRO

.MACRO EBTEXT_TELEPORT_TO_STORED_COORDINATES
	.BYTE $1F, $69
.ENDMACRO

.MACRO EBTEXT_REALIZE_PSI arg, arg2
	.BYTE $1F, $71, arg, arg2
.ENDMACRO

.MACRO EBTEXT_EQUIP_ITEM_TO_CHARACTER arg, arg2
	.BYTE $1F, $83, arg, arg2
.ENDMACRO

.MACRO EBTEXT_SET_TPT_DIRECTION_UP
	.BYTE $1F, $A0
.ENDMACRO

.MACRO EBTEXT_SET_TPT_DIRECTION_DOWN
	.BYTE $1F, $A1
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1F_A2
	.BYTE $1F, $A2
.ENDMACRO

.MACRO EBTEXT_SAVE_GAME
	.BYTE $1F, $B0
.ENDMACRO

.MACRO EBTEXT_JUMP_MULTI2 dest0, dest1, dest2, dest3, dest4, dest5, dest6, dest7, dest8, dest9, dest10, dest11, dest12, dest13, dest14, dest15, dest16, dest17, dest18, dest19, dest20, dest21, dest22, dest23, dest24, dest25, dest26, dest27, dest28, dest29, dest30, dest31, dest32, dest33, dest34, dest35, dest36, dest37, dest38, dest39, dest40, dest41, dest42, dest43, dest44, dest45, dest46, dest47, dest48, dest49, dest50, dest51, dest52, dest53, dest54, dest55, dest56, dest57, dest58, dest59, dest60, dest61, dest62, dest63, dest64, dest65, dest66, dest67, dest68, dest69, dest70, dest71, dest72, dest73, dest74, dest75, dest76, dest77, dest78, dest79
	.BYTE $1F, $C0, .PARAMCOUNT

	.IF(.PARAMCOUNT > 0)
		.DWORD dest0
	.ENDIF
	.IF(.PARAMCOUNT > 1)
		.DWORD dest1
	.ENDIF
	.IF(.PARAMCOUNT > 2)
		.DWORD dest2
	.ENDIF
	.IF(.PARAMCOUNT > 3)
		.DWORD dest3
	.ENDIF
	.IF(.PARAMCOUNT > 4)
		.DWORD dest4
	.ENDIF
	.IF(.PARAMCOUNT > 5)
		.DWORD dest5
	.ENDIF
	.IF(.PARAMCOUNT > 6)
		.DWORD dest6
	.ENDIF
	.IF(.PARAMCOUNT > 7)
		.DWORD dest7
	.ENDIF
	.IF(.PARAMCOUNT > 8)
		.DWORD dest8
	.ENDIF
	.IF(.PARAMCOUNT > 9)
		.DWORD dest9
	.ENDIF
	.IF(.PARAMCOUNT > 10)
		.DWORD dest10
	.ENDIF
	.IF(.PARAMCOUNT > 11)
		.DWORD dest11
	.ENDIF
	.IF(.PARAMCOUNT > 12)
		.DWORD dest12
	.ENDIF
	.IF(.PARAMCOUNT > 13)
		.DWORD dest13
	.ENDIF
	.IF(.PARAMCOUNT > 14)
		.DWORD dest14
	.ENDIF
	.IF(.PARAMCOUNT > 15)
		.DWORD dest15
	.ENDIF
	.IF(.PARAMCOUNT > 16)
		.DWORD dest16
	.ENDIF
	.IF(.PARAMCOUNT > 17)
		.DWORD dest17
	.ENDIF
	.IF(.PARAMCOUNT > 18)
		.DWORD dest18
	.ENDIF
	.IF(.PARAMCOUNT > 19)
		.DWORD dest19
	.ENDIF
	.IF(.PARAMCOUNT > 20)
		.DWORD dest20
	.ENDIF
	.IF(.PARAMCOUNT > 21)
		.DWORD dest21
	.ENDIF
	.IF(.PARAMCOUNT > 22)
		.DWORD dest22
	.ENDIF
	.IF(.PARAMCOUNT > 23)
		.DWORD dest23
	.ENDIF
	.IF(.PARAMCOUNT > 24)
		.DWORD dest24
	.ENDIF
	.IF(.PARAMCOUNT > 25)
		.DWORD dest25
	.ENDIF
	.IF(.PARAMCOUNT > 26)
		.DWORD dest26
	.ENDIF
	.IF(.PARAMCOUNT > 27)
		.DWORD dest27
	.ENDIF
	.IF(.PARAMCOUNT > 28)
		.DWORD dest28
	.ENDIF
	.IF(.PARAMCOUNT > 29)
		.DWORD dest29
	.ENDIF
	.IF(.PARAMCOUNT > 30)
		.DWORD dest30
	.ENDIF
	.IF(.PARAMCOUNT > 31)
		.DWORD dest31
	.ENDIF
	.IF(.PARAMCOUNT > 32)
		.DWORD dest32
	.ENDIF
	.IF(.PARAMCOUNT > 33)
		.DWORD dest33
	.ENDIF
	.IF(.PARAMCOUNT > 34)
		.DWORD dest34
	.ENDIF
	.IF(.PARAMCOUNT > 35)
		.DWORD dest35
	.ENDIF
	.IF(.PARAMCOUNT > 36)
		.DWORD dest36
	.ENDIF
	.IF(.PARAMCOUNT > 37)
		.DWORD dest37
	.ENDIF
	.IF(.PARAMCOUNT > 38)
		.DWORD dest38
	.ENDIF
	.IF(.PARAMCOUNT > 39)
		.DWORD dest39
	.ENDIF
	.IF(.PARAMCOUNT > 40)
		.DWORD dest40
	.ENDIF
	.IF(.PARAMCOUNT > 41)
		.DWORD dest41
	.ENDIF
	.IF(.PARAMCOUNT > 42)
		.DWORD dest42
	.ENDIF
	.IF(.PARAMCOUNT > 43)
		.DWORD dest43
	.ENDIF
	.IF(.PARAMCOUNT > 44)
		.DWORD dest44
	.ENDIF
	.IF(.PARAMCOUNT > 45)
		.DWORD dest45
	.ENDIF
	.IF(.PARAMCOUNT > 46)
		.DWORD dest46
	.ENDIF
	.IF(.PARAMCOUNT > 47)
		.DWORD dest47
	.ENDIF
	.IF(.PARAMCOUNT > 48)
		.DWORD dest48
	.ENDIF
	.IF(.PARAMCOUNT > 49)
		.DWORD dest49
	.ENDIF
	.IF(.PARAMCOUNT > 50)
		.DWORD dest50
	.ENDIF
	.IF(.PARAMCOUNT > 51)
		.DWORD dest51
	.ENDIF
	.IF(.PARAMCOUNT > 52)
		.DWORD dest52
	.ENDIF
	.IF(.PARAMCOUNT > 53)
		.DWORD dest53
	.ENDIF
	.IF(.PARAMCOUNT > 54)
		.DWORD dest54
	.ENDIF
	.IF(.PARAMCOUNT > 55)
		.DWORD dest55
	.ENDIF
	.IF(.PARAMCOUNT > 56)
		.DWORD dest56
	.ENDIF
	.IF(.PARAMCOUNT > 57)
		.DWORD dest57
	.ENDIF
	.IF(.PARAMCOUNT > 58)
		.DWORD dest58
	.ENDIF
	.IF(.PARAMCOUNT > 59)
		.DWORD dest59
	.ENDIF
	.IF(.PARAMCOUNT > 60)
		.DWORD dest60
	.ENDIF
	.IF(.PARAMCOUNT > 61)
		.DWORD dest61
	.ENDIF
	.IF(.PARAMCOUNT > 62)
		.DWORD dest62
	.ENDIF
	.IF(.PARAMCOUNT > 63)
		.DWORD dest63
	.ENDIF
	.IF(.PARAMCOUNT > 64)
		.DWORD dest64
	.ENDIF
	.IF(.PARAMCOUNT > 65)
		.DWORD dest65
	.ENDIF
	.IF(.PARAMCOUNT > 66)
		.DWORD dest66
	.ENDIF
	.IF(.PARAMCOUNT > 67)
		.DWORD dest67
	.ENDIF
	.IF(.PARAMCOUNT > 68)
		.DWORD dest68
	.ENDIF
	.IF(.PARAMCOUNT > 69)
		.DWORD dest69
	.ENDIF
	.IF(.PARAMCOUNT > 70)
		.DWORD dest70
	.ENDIF
	.IF(.PARAMCOUNT > 71)
		.DWORD dest71
	.ENDIF
	.IF(.PARAMCOUNT > 72)
		.DWORD dest72
	.ENDIF
	.IF(.PARAMCOUNT > 73)
		.DWORD dest73
	.ENDIF
	.IF(.PARAMCOUNT > 74)
		.DWORD dest74
	.ENDIF
	.IF(.PARAMCOUNT > 75)
		.DWORD dest75
	.ENDIF
	.IF(.PARAMCOUNT > 76)
		.DWORD dest76
	.ENDIF
	.IF(.PARAMCOUNT > 77)
		.DWORD dest77
	.ENDIF
	.IF(.PARAMCOUNT > 78)
		.DWORD dest78
	.ENDIF
	.IF(.PARAMCOUNT > 79)
		.DWORD dest79
	.ENDIF
	.IF (.PARAMCOUNT > 80)
		.WARNING(.SPRINTF("Not enough parameters for JUMP_MULTI2, need %d", .PARAMCOUNT))
	.ENDIF
.ENDMACRO

.MACRO EBTEXT_TRY_FIX_ITEM arg
	.BYTE $1F, $D0, arg
.ENDMACRO

.MACRO EBTEXT_GET_DIRECTION_OF_NEARBY_TRUFFLE
	.BYTE $1F, $D1
.ENDMACRO

.MACRO EBTEXT_SUMMON_WANDERING_PHOTOGRAPHER arg
	.BYTE $1F, $D2, arg
.ENDMACRO

.MACRO EBTEXT_TRIGGER_TIMED_EVENT arg
	.BYTE $1F, $D3, arg
.ENDMACRO

.MACRO EBTEXT_CHANGE_MAP_PALETTE arg, arg2
	.BYTE $1F, $E1
	.WORD arg
	.BYTE arg2
.ENDMACRO

.MACRO EBTEXT_CHANGE_GENERATED_SPRITE_DIRECTION arg, arg2
	.BYTE $1F, $E4
	.WORD arg
	.BYTE arg2
.ENDMACRO

.MACRO EBTEXT_SET_PLAYER_LOCK arg
	.BYTE $1F, $E5, arg
.ENDMACRO

.MACRO EBTEXT_DELAY_TPT_APPEARANCE arg
	.BYTE $1F, $E6
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1F_E7 arg
	.BYTE $1F, $E7
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_RESTRICT_PLAYER_MOVEMENT_WHEN_CAMERA_REPOSITIONED arg
	.BYTE $1F, $E8, arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1F_E9 arg
	.BYTE $1F, $E9
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1F_EA arg
	.BYTE $1F, $EA
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_MAKE_INVISIBLE arg, arg2
	.BYTE $1F, $EB, arg, arg2
.ENDMACRO

.MACRO EBTEXT_MAKE_VISIBLE arg, arg2
	.BYTE $1F, $EC, arg, arg2
.ENDMACRO

.MACRO EBTEXT_RESTORE_MOVEMENT
	.BYTE $1F, $ED
.ENDMACRO

.MACRO EBTEXT_WARP_PARTY_TO_TPT_ENTRY arg
	.BYTE $1F, $EE
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_UNKNOWN_CC_1F_EF arg
	.BYTE $1F, $EF
	.WORD arg
.ENDMACRO

.MACRO EBTEXT_RIDE_BICYCLE
	.BYTE $1F, $F0
.ENDMACRO

.MACRO EBTEXT_SET_TPT_MOVEMENT_CODE arg, arg2
	.BYTE $1F, $F1
	.WORD arg, arg2
.ENDMACRO

.MACRO EBTEXT_SET_SPRITE_MOVEMENT_CODE arg, arg2
	.BYTE $1F, $F2
	.WORD arg, arg2
.ENDMACRO

.MACRO EBTEXT_CREATE_FLOATING_SPRITE_NEAR_ENTITY arg, arg2
	.BYTE $1F, $F3
	.WORD arg
	.BYTE arg2
.ENDMACRO

.MACRO EBTEXT_DELETE_FLOATING_SPRITE_NEAR_ENTITY arg
	.BYTE $1F, $F4
	.WORD arg
.ENDMACRO
